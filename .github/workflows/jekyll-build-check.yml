name: Jekyll Build Check

on:
  pull_request:
    types: [opened, synchronize, reopened]
    paths:
      - '**.html'
      - '**.md'
      - '**.yml'
      - '**.yaml'
      - '_config.yml'
      - '_includes/**'
      - '_layouts/**'
      - '_sass/**'
      - 'src/**'
      - 'package.json'
      - 'tailwind.config.js'
  
  # Allow manual triggering
  workflow_dispatch:

jobs:
  build-check:
    runs-on: ubuntu-latest
    name: Build Validation
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 3.1
          bundler-cache: true

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
          cache: 'npm'

      - name: Install dependencies
        run: |
          # Install Ruby gems
          bundle install
          
          # Install Node.js dependencies
          npm ci

      - name: Build TailwindCSS
        run: |
          echo "üé® Building TailwindCSS..."
          npm run build
          
          # Verify CSS file was created
          if [ ! -f "dist/styles.css" ]; then
            echo "‚ùå TailwindCSS build failed - dist/styles.css not found"
            exit 1
          fi
          
          # Check if CSS file is not empty
          if [ ! -s "dist/styles.css" ]; then
            echo "‚ùå TailwindCSS build produced empty CSS file"
            exit 1
          fi
          
          echo "‚úÖ TailwindCSS build successful"
          echo "üìä CSS file size: $(du -h dist/styles.css | cut -f1)"

      - name: Validate Jekyll Configuration
        run: |
          echo "üîß Validating Jekyll configuration..."
          
          # Check _config.yml syntax
          ruby -c _config.yml
          
          # Test Jekyll configuration loading
          bundle exec jekyll doctor
          
          echo "‚úÖ Jekyll configuration is valid"

      - name: Build Jekyll Site
        run: |
          echo "üèóÔ∏è  Building Jekyll site..."
          
          # Set Jekyll environment
          export JEKYLL_ENV=production
          
          # Build the site
          bundle exec jekyll build --verbose
          
          # Verify _site directory was created
          if [ ! -d "_site" ]; then
            echo "‚ùå Jekyll build failed - _site directory not found"
            exit 1
          fi
          
          # Check for essential files
          essential_files=("_site/index.html" "_site/workshop/index.html" "_site/dist/styles.css")
          for file in "${essential_files[@]}"; do
            if [ ! -f "$file" ]; then
              echo "‚ùå Essential file missing: $file"
              exit 1
            fi
          done
          
          echo "‚úÖ Jekyll build successful"
          echo "üìä Generated files: $(find _site -name "*.html" | wc -l) HTML files"

      - name: Validate HTML Structure
        run: |
          echo "üîç Performing basic HTML validation..."
          
          # Check for basic HTML structure in key pages
          pages=("_site/index.html" "_site/workshop/index.html")
          
          for page in "${pages[@]}"; do
            echo "Checking $page..."
            
            # Check for essential HTML elements
            if ! grep -q "<html" "$page"; then
              echo "‚ùå Missing <html> tag in $page"
              exit 1
            fi
            
            if ! grep -q "<head>" "$page"; then
              echo "‚ùå Missing <head> tag in $page"
              exit 1
            fi
            
            if ! grep -q "<body>" "$page"; then
              echo "‚ùå Missing <body> tag in $page"
              exit 1
            fi
            
            # Check for meta tags
            if ! grep -q "<meta.*viewport" "$page"; then
              echo "‚ö†Ô∏è  Warning: Missing viewport meta tag in $page"
            fi
            
            if ! grep -q "<title>" "$page"; then
              echo "‚ö†Ô∏è  Warning: Missing title tag in $page"
            fi
          done
          
          echo "‚úÖ HTML structure validation passed"

      - name: Check for Liquid Template Errors
        run: |
          echo "üß™ Checking for Liquid template errors in build output..."
          
          # Look for common Liquid error patterns in generated HTML
          error_patterns=("Liquid Error" "Liquid Exception" "undefined method" "undefined variable")
          
          for pattern in "${error_patterns[@]}"; do
            if grep -r "$pattern" _site/ --include="*.html"; then
              echo "‚ùå Found Liquid template error: $pattern"
              exit 1
            fi
          done
          
          echo "‚úÖ No Liquid template errors found"

      - name: Verify Navigation Links
        run: |
          echo "üîó Checking navigation links..."
          
          # Check that workshop link exists in navigation
          if ! grep -q '/workshop/' _site/index.html; then
            echo "‚ùå Workshop link missing from homepage navigation"
            exit 1
          fi
          
          # Verify workshop page exists
          if [ ! -f "_site/workshop/index.html" ]; then
            echo "‚ùå Workshop page not generated"
            exit 1
          fi
          
          echo "‚úÖ Navigation links verification passed"

      - name: Build Summary
        run: |
          echo "üìã Build Summary:"
          echo "===================="
          echo "‚úÖ TailwindCSS build: SUCCESS"
          echo "‚úÖ Jekyll build: SUCCESS" 
          echo "‚úÖ HTML validation: SUCCESS"
          echo "‚úÖ Template validation: SUCCESS"
          echo "‚úÖ Navigation check: SUCCESS"
          echo ""
          echo "üìä Site Statistics:"
          echo "- HTML files: $(find _site -name "*.html" | wc -l)"
          echo "- CSS file size: $(du -h _site/dist/styles.css | cut -f1)"
          echo "- Total site size: $(du -sh _site | cut -f1)"
          echo ""
          echo "üöÄ Site is ready for deployment!"